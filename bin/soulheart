#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
begin
  require 'redis'
rescue LoadError
  require 'rubygems'
  require 'redis'
end
require 'soulheart'
require 'optparse'
require 'tempfile'

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: soulheart [options] COMMAND'

  opts.separator ''
  opts.separator 'Options:'

  opts.on('-r', '--redis [HOST:PORT]', 'Redis connection string') do |host|
    Soulheart.redis = host
  end

  opts.on('-s', '--stop-words [FILE]', 'Path to file containing a list of stop words to overwrite defaults - "the", "at", "vs"') do |fn|
    File.open(fn) do |file|
      Soulheart.stop_words = file.readlines.map(&:strip).reject(&:empty?)
    end
  end

  opts.on('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  opts.on('-A', '--no-all', 'on load: Do not add items into the "all" category (on load)') do |size|
    NO_ALL = true
  end

  opts.on('-C', '--no-combinatorial', 'Do not create combined categories, do not add items to combined categories (on load)') do |size|
    NO_COMBINATORIAL = true
  end

  opts.on('-R', '--remove-results', 'Remove results data - breaks the cache, fully clears all loaded data. (on clear)') do |size|
    REMOVE_RESULTS = true
  end

  opts.separator ''
  opts.separator 'Commands:'
  opts.separator '  load   FILE  Loads data from a FILE - can be a local file or a url. Accepted formats are .json, .tsv and .csv'
  opts.separator "  reset        Removes all existing data (optionally pass a file to run load after reset)"
  opts.separator ''
  opts.separator 'Additional info: https://sethherr.github.io/soulheart/commands/'
  opts.separator ''
end


def load(file)
  require 'uri'
  if file =~ URI.regexp
    require 'open-uri'
    f = open(file)
  elsif File.exist?(file)
    f = File.open(file)
  else
    puts "Couldn't open file: #{file}"
    return true
  end

  start_time = Time.now.to_i
  count = 0
  loader = Soulheart::Loader.new({no_all: NO_ALL, no_combinatorial: NO_COMBINATORIAL})
  lines = []
  begin
    if file.match(/(c|t)sv\z/i)
      puts 'Reading a CSV'
      require 'csv'
      sep = file.match(/tsv\z/i) ? "\t" : ','
      CSV.foreach(f, headers: true, col_sep: sep) do |row|
        lines << row.to_hash
        count += 1
      end
    elsif file.match(/json\z/i)
      puts 'Reading JSON'
      puts "Loading items in batches of #{BATCH_SIZE} ..."
      until f.eof?
        lines = []
        BATCH_SIZE.times do
          break if f.eof?
          lines << MultiJson.decode(f.gets)
          count += 1
        end
      end
    else
      puts 'unknown File type'
    end
  ensure
    f.close
  end
  loader.load(lines)
  puts "Total time to load:                                  #{Time.now.to_i - start_time} second(s)"
end

def clear(remove_results)
  Soulheart::Loader.new.clear(remove_results)
end

parser.parse!

case ARGV[0]
when 'load'
  BATCH_SIZE ||= 1000
  NO_ALL ||= false
  NO_COMBINED_CATEGORIES ||= false
  load ARGV[1]
when 'reset'
  clear(REMOVE_RESULTS)
  load ARGV[1] if ARGV[1]
else
  puts parser.help
end
